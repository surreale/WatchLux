const express = require("express");
const crypto = require("crypto");
const db = require("../db/dboperations");

const router = express.Router();

// üîπ Regisztr√°ci√≥ v√©gpont
router.post("/register", async (req, res) => {
    try {
        const { nev, tel, email, jelszo } = req.body;

        if (!nev || !tel || !email || !jelszo) {
            return res.status(400).json({ error: "Minden mez≈ë kit√∂lt√©se k√∂telez≈ë!" });
        }

        // üîπ Jelsz√≥ valid√°ci√≥ a backendben is
        if (jelszo.length < 8 || !/[A-Z]/.test(jelszo) || !/[a-z]/.test(jelszo)) {
            return res.status(400).json({ error: "A jelsz√≥nak legal√°bb 8 karakter hossz√∫nak kell lennie, √©s tartalmaznia kell kis- √©s nagybet≈±t." });
        }

        const existingUser = await db.checkExistingUser(email, tel);
        if (existingUser) {
            return res.status(400).json({ error: "M√°r l√©tezik ilyen e-mail vagy telefonsz√°m!" });
        }

        const hashedPassword = crypto.createHash("sha256").update(jelszo).digest("hex");

        await db.registerUser(nev, tel.replace("+", ""), email, hashedPassword);

        res.status(201).json({ message: "Sikeres regisztr√°ci√≥!" });
    } catch (error) {
        console.error("‚ùå Hiba t√∂rt√©nt a regisztr√°ci√≥ sor√°n:", error);
        res.status(500).json({ error: "Szerverhiba, pr√≥b√°ld √∫jra k√©s≈ëbb!" });
    }
});

router.post("/login", async (req, res) => {
    try {
        const { email, jelszo } = req.body;

        if (!email || !jelszo) {
            return res.status(400).json({ error: "Az e-mail √©s a jelsz√≥ megad√°sa k√∂telez≈ë!" });
        }

        // üîπ Jelsz√≥ SHA-256 titkos√≠t√°sa
        const hashedPassword = crypto.createHash("sha256").update(jelszo).digest("hex");

        // üîπ Ellen≈ërizz√ºk, hogy l√©tezik-e a felhaszn√°l√≥
        const user = await db.getUserByEmail(email);

        if (!user || user.jelszo !== hashedPassword) {
            return res.status(401).json({ error: "Hib√°s e-mail vagy jelsz√≥!" });
        }

        res.status(200).json({ message: "Sikeres bejelentkez√©s!", user });
    } catch (error) {
        console.error("‚ùå Hiba t√∂rt√©nt a bejelentkez√©s sor√°n:", error);
        res.status(500).json({ error: "Szerverhiba, pr√≥b√°ld √∫jra k√©s≈ëbb!" });
    }
});


module.exports = router;

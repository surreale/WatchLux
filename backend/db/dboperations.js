require('dotenv').config();

const config = require('./dbconfig');
const sql = require('mysql2/promise');

let pool = sql.createPool(config);

async function getProducts() {
  try {
    console.log(config);
    const [rows] = await pool.query('SELECT * FROM oralekerdezes');
    return rows;
  } catch (error) {
    throw error;
  }
}

async function getProductById(id) {
  try {
    const [rows] = await pool.query('SELECT * FROM oralekerdezes WHERE oraaz = ?', [id]);
    return rows.length > 0 ? rows[0] : null;
  } catch (error) {
    throw error;
  }
}

async function getFilterData(filters) {
  let sql = "SELECT * FROM oralekerdezes";
  const conditions = [];
  const values = [];

  if (filters.marka) {
    conditions.push("marka = ?");
    values.push(filters.marka);
  }

  if (filters.nem) {
    conditions.push("nem = ?");
    values.push(filters.nem);
  }

  if (filters.meghajtas) {
    conditions.push("meghajtas = ?");
    values.push(filters.meghajtas);
  }

  if (filters.vizallosag) {
    conditions.push("vizallosag = ?");
    values.push(filters.vizallosag);
  }

  if (filters.sulygrammban) {
    conditions.push("sulygrammban = ?");
    values.push(filters.sulygrammban);
  }

  if (filters.tipus) {
    conditions.push("tipus = ?");
    values.push(filters.tipus);
  }

  if (filters.datumkijelzes) {
    conditions.push("datumkijelzes = ?");
    values.push(filters.datumkijelzes);
  }

  if (filters.extrafunkcio) {
    conditions.push("extrafunkcio = ?");
    values.push(filters.extrafunkcio);
  }

  if (filters.atokszine) {
    conditions.push("atokszine = ?");
    values.push(filters.atokszine);
  }
  
  if (filters.aszamlapszine) {
    conditions.push("aszamlapszine = ?");
    values.push(filters.aszamlapszine);
  }
  
  if (filters.atok) {
    conditions.push("atok = ?");
    values.push(filters.atok);
  }
  
  if (filters.kristalyuveg) {
    conditions.push("kristalyuveg = ?");
    values.push(filters.kristalyuveg);
  }

  if (filters.szamlaptipus) {
    conditions.push("szamlaptipus = ?");
    values.push(filters.szamlaptipus);
  }
  
  if (filters.oraforma) {
    conditions.push("oraforma = ?");
    values.push(filters.oraforma);
  }

  if (filters.szijszine) {
    conditions.push("szijszine = ?");
    values.push(filters.szijszine);
  }
  
  if (filters.szij) {
    conditions.push("szij = ?");
    values.push(filters.szij);
  }
  
  if (filters.maxcsuklomili) {
    conditions.push("maxcsuklomili = ?");
    values.push(filters.maxcsuklomili);
  }
  

  if (conditions.length > 0) {
    sql += " WHERE " + conditions.join(" AND ");
  }

  console.log("üîç SQL lek√©rdez√©s:", sql, "√ârt√©kek:", values);

  try {
    const [rows] = await pool.query(sql, values);
    console.log("‚úÖ Sz≈±rt term√©kek:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba a getFilterData() futtat√°sa k√∂zben:", error);
    throw error;
  }
}

async function getBrands() {
  try {
    console.log("üîç M√°rk√°k lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT marka FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett m√°rk√°k:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a m√°rk√°k lek√©r√©sekor:", error);
    throw error;
  }
}

async function getGenders() {
  try {
    console.log("üîç Nemek lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT nem FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett nemek:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a nemek lek√©r√©sekor:", error);
    throw error;
  }
}

async function getMeghajtasok() {
  try {
    console.log("üîç Meghajt√°sok lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT meghajtas FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett meghajt√°sok:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a meghajt√°sok lek√©r√©sekor:", error);
    throw error;
  }
}

async function getVizallosagok() {
  try {
    console.log("üîç V√≠z√°ll√≥s√°gok lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT vizallosag FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett v√≠z√°ll√≥s√°gok:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a v√≠z√°ll√≥s√°gok lek√©r√©sekor:", error);
    throw error;
  }
}

async function getSulyok() {
  try {
    console.log("üîç S√∫lyok lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT sulygrammban FROM oralekerdezes ORDER BY CAST(sulygrammban AS UNSIGNED)");
    console.log("‚úÖ Lek√©rdezett s√∫lyok:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a s√∫lyok lek√©r√©sekor:", error);
    throw error;
  }
}

async function getTipusok() {
  try {
    console.log("üîç T√≠pusok lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT tipus FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett t√≠pusok:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a t√≠pusok lek√©r√©sekor:", error);
    throw error;
  }
}

async function getDatumkijelzesek() {
  try {
    console.log("üîç D√°tumkijelz√©sek lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT datumkijelzes FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett d√°tumkijelz√©sek:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a d√°tumkijelz√©sek lek√©r√©sekor:", error);
    throw error;
  }
}

async function getExtrafunkciok() {
  try {
    console.log("üîç Extrafunkci√≥k lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT extrafunkcio FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett extrafunkci√≥k:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt az extrafunkci√≥k lek√©r√©sekor:", error);
    throw error;
  }
}



async function getAtokszinek() {
  try {
    console.log("üîç Tok sz√≠nek lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT atokszine FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett tok sz√≠nek:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a tok sz√≠nek lek√©r√©sekor:", error);
    throw error;
  }
}

async function getAszamlapszinek() {
  try {
    console.log("üîç Sz√°mlap sz√≠nek lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT aszamlapszine FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett sz√°mlap sz√≠nek:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a sz√°mlap sz√≠nek lek√©r√©sekor:", error);
    throw error;
  }
}

async function getAtok() {
  try {
    console.log("üîç Tok anyagok lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT atok FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett tok anyagok:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a tok anyagok lek√©r√©sekor:", error);
    throw error;
  }
}

async function getKristalyuvegek() {
  try {
    console.log("üîç Krist√°ly√ºveg t√≠pusok lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT kristalyuveg FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett krist√°ly√ºveg t√≠pusok:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a krist√°ly√ºveg t√≠pusok lek√©r√©sekor:", error);
    throw error;
  }
}

async function getSzamlaptipusok() {
  try {
    console.log("üîç Sz√°mlapt√≠pusok lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT szamlaptipus FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett sz√°mlapt√≠pusok:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a sz√°mlapt√≠pusok lek√©r√©sekor:", error);
    throw error;
  }
}

async function getOraformak() {
  try {
    console.log("üîç √ìraform√°k lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT oraforma FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett √≥raform√°k:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt az √≥raform√°k lek√©r√©sekor:", error);
    throw error;
  }
}

async function getSzijszinek() {
  try {
    console.log("üîç Sz√≠jak sz√≠n√©nek lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT szijszine FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett sz√≠jak sz√≠nei:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a sz√≠jak sz√≠n√©nek lek√©r√©sekor:", error);
    throw error;
  }
}

async function getSzijk() {
  try {
    console.log("üîç Sz√≠jak anyag√°nak lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT szij FROM oralekerdezes");
    console.log("‚úÖ Lek√©rdezett sz√≠jak anyagai:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a sz√≠jak anyag√°nak lek√©r√©sekor:", error);
    throw error;
  }
}

async function getMaxCsuklomili() {
  try {
    console.log("üîç Maxim√°lis csukl√≥m√©ret lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT DISTINCT maxcsuklomili FROM oralekerdezes ORDER BY maxcsuklomili");
    console.log("‚úÖ Lek√©rdezett maxim√°lis csukl√≥m√©retek:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a maxim√°lis csukl√≥m√©ret lek√©r√©sekor:", error);
    throw error;
  }
}



module.exports = {
  getProducts,
  getProductById,
  getFilterData,
  getBrands,
  getGenders,
  getMeghajtasok,
  getVizallosagok,
  getSulyok,
  getTipusok,
  getDatumkijelzesek,
  getExtrafunkciok,
  getAtokszinek,
  getAszamlapszinek,
  getAtok,
  getKristalyuvegek,
  getSzamlaptipusok,
  getOraformak,
  getSzijszinek,
  getSzijk,
  getMaxCsuklomili
  
};

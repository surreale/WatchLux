require('dotenv').config();

const config = require('./dbconfig');
const sql = require('mysql2/promise');


let pool = sql.createPool(config);

async function getProducts() {
  try {
    console.log(config);
    const [rows] = await pool.query('SELECT * FROM oralekerdezes');
    return rows;
  } catch (error) {
    throw error;
  }
}

async function getProductById(id) {
  try {
    const [rows] = await pool.query('SELECT * FROM oralekerdezes WHERE oraaz = ?', [id]);
    return rows.length > 0 ? rows[0] : null;
  } catch (error) {
    throw error;
  }
}

async function getFilterData(filters) {
  let sql = "SELECT * FROM oralekerdezes";
  const conditions = [];
  const values = [];

  if (filters.marka) {
    conditions.push("marka = ?");
    values.push(filters.marka);
  }

  if (conditions.length > 0) {
    sql += " WHERE " + conditions.join(" AND ");
  }

  console.log("üîç SQL lek√©rdez√©s:", sql, "√ârt√©kek:", values);

  try {
    const [rows] = await pool.query(sql, values);
    console.log("‚úÖ Sz≈±rt term√©kek:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba a getFilterData() futtat√°sa k√∂zben:", error);
    throw error;
  }
}


async function getUniqueValues(column, table) {
  try {
    console.log(`üîç SQL lek√©rdez√©s: SELECT DISTINCT ?? FROM ??`, [column, table]);

    const [rows] = await pool.query(`SELECT DISTINCT ?? FROM ??`, [column, table]);

    console.log("‚úÖ Lek√©rdezett √©rt√©kek:", rows);
    return rows.map(row => row[column]); 
  } catch (error) {
    console.error(`‚ùå Hiba a ${column} oszlop lek√©r√©sekor a ${table} t√°bl√°b√≥l:`, error);
    throw error;
  }
}

async function getBrands() {
  try {
    console.log("üîç M√°rk√°k lek√©rdez√©se az adatb√°zisb√≥l...");
    const [rows] = await pool.query("SELECT markaaz, marka FROM marka");
    console.log("‚úÖ Lek√©rdezett m√°rk√°k:", rows);
    return rows;
  } catch (error) {
    console.error("‚ùå Hiba t√∂rt√©nt a m√°rk√°k lek√©r√©sekor:", error);
    throw error;
  }
}
module.exports = {
  getProducts,
  getProductById,
  getFilterData,
  getUniqueValues,
  getBrands,
};


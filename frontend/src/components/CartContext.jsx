import React, { createContext, useState, useEffect } from "react";
import "./Notification.css";

export const CartContext = createContext(); // KosÃ¡r kontextus lÃ©trehozÃ¡sa

export const CartProvider = ({ children }) => {
  const [cart, setCart] = useState([]);
  const [notifications, setNotifications] = useState([]); // TÃ¶bb Ã©rtesÃ­tÃ©s tÃ¡rolÃ¡sa

  // ğŸ”¹ BetÃ¶ltjÃ¼k a kosarat a localStorage-bÃ³l, ha van elmentett adat
  useEffect(() => {
    const storedCart = JSON.parse(localStorage.getItem("cart"));
    if (storedCart) {
      setCart(storedCart);
    }
  }, []);

  // ğŸ”¹ KosÃ¡r mentÃ©se localStorage-ba
  useEffect(() => {
    localStorage.setItem("cart", JSON.stringify(cart));
  }, [cart]);

// ğŸ”¹ addToCart fÃ¼ggvÃ©ny
const addToCart = (product) => {
  setCart((prevCart) => {
    const existingItem = prevCart.find((item) => item.oraaz === product.oraaz);
    if (existingItem) {
      // Ha mÃ¡r lÃ©tezik a termÃ©k, csak a mennyisÃ©get nÃ¶veli
      addNotification("TermÃ©k mennyisÃ©ge frissÃ­tve a kosÃ¡rban!");
      return prevCart.map((item) =>
        item.oraaz === product.oraaz
          ? { ...item, mennyiseg: (item.mennyiseg || 1) + (product.mennyiseg || 1) }
          : item
      );
    } else {
      // Ha Ãºj termÃ©k, hozzÃ¡adja a kosÃ¡rhoz alapÃ©rtelmezett mennyisÃ©ggel
      addNotification("TermÃ©k hozzÃ¡adva a kosÃ¡rhoz!");
      return [...prevCart, { ...product, mennyiseg: product.mennyiseg || 1 }];
    }
  });
};




  // ğŸ”¹ TermÃ©k eltÃ¡volÃ­tÃ¡sa a kosÃ¡rbÃ³l (kÃ¼lÃ¶n gombhoz)
  const removeFromCart = (oraaz) => {
    setCart((prevCart) => prevCart.filter((item) => item.oraaz !== oraaz));
    addNotification("TermÃ©k eltÃ¡volÃ­tva a kosÃ¡rbÃ³l");
  };

  // ğŸ”¹ Ãšj Ã©rtesÃ­tÃ©s hozzÃ¡adÃ¡sa Ã©s automatikus tÃ¶rlÃ©se 3 mÃ¡sodperc utÃ¡n
  const addNotification = (message) => {
    const id = Date.now(); // Egyedi ID minden Ã©rtesÃ­tÃ©shez
    setNotifications((prev) => [...prev, { id, message }]);

    setTimeout(() => {
      setNotifications((prev) => prev.filter((notif) => notif.id !== id));
    }, 3000);
  };

  return (
    <CartContext.Provider value={{ cart, addToCart, removeFromCart }}>
      {children}
      <div className="notification-container">
        {notifications.map((notif) => (
          <Notification key={notif.id} message={notif.message} />
        ))}
      </div>
    </CartContext.Provider>
  );
};

// ğŸ”¹ TÃ¶bb Ã©rtesÃ­tÃ©st tÃ¡mogatÃ³ komponens
const Notification = ({ message }) => {
  return (
    <div className="notification">
      <p>{message}</p>
      <div className="progress-bar"></div>
    </div>
  );
};

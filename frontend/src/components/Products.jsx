import React, { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import axios from "axios";
import Filter from "./Filter"; 
import "./Products.css";

function Products() {
  const navigate = useNavigate();
  const location = useLocation();

  // üîπ TERM√âKLIST√ÅK (Eredeti + Sz≈±rt lista)
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [forceUpdate, setForceUpdate] = useState(false); // üî• √öj √°llapotv√°ltoz√≥ a friss√≠t√©shez
  
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [filterVisible, setFilterVisible] = useState(false);
  
  const productsPerPage = 20;
  const maxPageButtons = 5;

  // ‚úÖ **1Ô∏è‚É£ OLDALSZ√ÅM FRISS√çT√âSE**
  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const page = parseInt(params.get("page")) || 1;
    setCurrentPage(page);
  }, [location.search]);

  // ‚úÖ **2Ô∏è‚É£ TERM√âKEK BET√ñLT√âSE**
  useEffect(() => {
    axios.get("http://localhost:8080/ora/oralekerdezes")
      .then((response) => {
        setFilteredProducts(response.data);
        setTotalPages(Math.ceil(response.data.length / productsPerPage));
      })
      .catch(() => {
        console.error("‚ùå Hiba t√∂rt√©nt a term√©kek bet√∂lt√©sekor.");
      });
  }, []);

  // ‚úÖ **3Ô∏è‚É£ SZ≈∞R√âS MEGOLD√ÅSA**
  const applyFilters = async (filters) => {
    console.log("üîç Akt√≠v sz≈±r≈ëk:", filters);

    try {
        const response = await axios.get("http://localhost:8080/ora/filtered2", {
            params: filters,
        });

        console.log("‚úÖ SZ≈∞RT ADATOK A BACKENDT≈êL:", response.data);

        if (Array.isArray(response.data) && response.data.length > 0) {
            setFilteredProducts(response.data); // üî• Friss√≠t√©s
            setTotalPages(Math.ceil(response.data.length / productsPerPage));
            setCurrentPage(1); // üîπ Sz≈±r√©s ut√°n az 1. oldalra ugrunk
            setForceUpdate(prev => !prev); // üî• Kik√©nyszer√≠tj√ºk a friss√≠t√©st!
        } else {
            console.warn("‚ö†Ô∏è √úres lista √©rkezett, nincs tal√°lat!");
            setFilteredProducts([]);
            setForceUpdate(prev => !prev);
        }
    } catch (error) {
        console.error("‚ùå Hiba t√∂rt√©nt a sz≈±r√©s sor√°n:", error);
    }
};


  // ‚úÖ **4Ô∏è‚É£ OLDALV√ÅLT√ÅS**
  const handlePageChange = (page) => {
    navigate(`?page=${page}`);
    setCurrentPage(page);
  };

  // ‚úÖ **5Ô∏è‚É£ KIJAV√çTOTT MEGJELEN√çT√âS ‚Äì V√âGRE A SZ≈∞RT ADATOKAT MUTATJA**
  const startIndex = (currentPage - 1) * productsPerPage;
  const visibleProducts = filteredProducts.slice(startIndex, startIndex + productsPerPage);

  return (
    <div className="products-page">
      {/* SZ≈∞R≈ê GOMB */}
      <div className="filter-navbar">
        <button className="filter-toggle-button" onClick={() => setFilterVisible(!filterVisible)}>
          {filterVisible ? "Sz≈±r≈ë √∂sszecsuk√°sa" : "Sz≈±r≈ë megjelen√≠t√©se"}
        </button>
      </div>

      {filterVisible && <Filter setFilteredProducts={applyFilters} />} 

      {/* TERM√âKEK LIST√ÅJA */}
      <div className="products-container">
        <h2 className="products-title">Term√©kek</h2>
        <div className="products-grid" key={forceUpdate ? "update-yes" : "update-no"}>

          {visibleProducts.length > 0 ? (
            visibleProducts.map((product) => (
              <div
                key={product.oraaz}
                className="product-card"
                onClick={() => navigate(`/product/${product.oraaz}?page=${currentPage}`)}
              >
                <img
                  src={`/images/${product.kep1}`}
                  alt={product.megnevezes}
                  className="product-image"
                />
                <h3 className="product-name">{product.megnevezes}</h3>
                <p className="product-price product-ar">√År: {product.ar} Ft</p>
                <p className="product-stock">Rakt√°ron: {product.raktar}</p>
                <button
                  className="view-button"
                  onClick={(event) => {
                    event.stopPropagation();
                    navigate(`/product/${product.oraaz}?page=${currentPage}`);
                  }}
                >
                  Megtekint√©s
                </button>
              </div>
            ))
          ) : (
            <p className="no-products">‚ùå Nincs tal√°lat a kiv√°lasztott sz≈±r√©si felt√©telekre.</p>
          )}
        </div>

        {/* üîπ LAPOZ√ÅS */}
        {totalPages > 1 && (
          <div className="pagination">
            <button className="double-arrow" onClick={() => handlePageChange(1)} disabled={currentPage === 1}>
              &laquo;
            </button>
            <button className="arrow" onClick={() => handlePageChange(Math.max(1, currentPage - 1))} disabled={currentPage === 1}>
              &lt;
            </button>

            {Array.from({ length: maxPageButtons }, (_, index) => {
              const pageNumber = Math.max(1, currentPage - Math.floor(maxPageButtons / 2)) + index;
              return pageNumber <= totalPages ? (
                <button
                  key={pageNumber}
                  className={`page-button ${currentPage === pageNumber ? "active" : ""}`}
                  onClick={() => handlePageChange(pageNumber)}
                >
                  {pageNumber}
                </button>
              ) : null;
            })}

            <button className="arrow" onClick={() => handlePageChange(Math.min(totalPages, currentPage + 1))} disabled={currentPage === totalPages}>
              &gt;
            </button>
            <button className="double-arrow" onClick={() => handlePageChange(totalPages)} disabled={currentPage === totalPages}>
              &raquo;
            </button>
          </div>
        )}
      </div>
    </div>
  );
}

export default Products;
